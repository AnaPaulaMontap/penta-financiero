{"version":3,"sources":["provider.js","assets/Marcador de texto.png","App.js","serviceWorker.js","index.js"],"names":["firebase","require","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","module","exports","database","ref","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","child","on","snapshot","key","val","billComplete","read","item","id","push","setState","sort","arr1","arr2","emision","bill","map","element","date1","Date","setTime","day","getDate","month","getMonth","year","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","react_default","a","createElement","className","folio","emisor","rut","razonSocial","receptor","Number","tipo","detalle","servicio","monto","iva","src","logo","alt","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.112dc7c1.chunk.js","sourcesContent":["//import * as firebase from 'firebase';\nconst firebase = require('firebase');\n\nconst config = {\n    apiKey: \"AIzaSyAyq4TVMZjyF0K6mbS0nxV88CvRVP5Ps_Y\",\n    authDomain: \"penta-interview.firebaseapp.com\",\n    databaseURL: \"https://penta-interview.firebaseio.com\",\n    projectId: \"penta-interview\",\n    storageBucket: \"penta-interview.appspot.com\",\n    messagingSenderId: \"874705362785\",\n    appId: \"1:874705362785:web:b2fae578d8f22763\"\n  };\n\nfirebase.initializeApp(config);\n\n//export const database = firebase.database().ref();\n\nmodule.exports ={\n   database: firebase.database().ref()\n}","module.exports = __webpack_public_path__ + \"static/media/Marcador de texto.a2ad4b16.png\";","import React, {Component} from 'react';\nimport {database} from './provider'\nimport './App.css';\nimport logo from './assets/Marcador de texto.png'\n\nclass App extends Component {\n    constructor(){\n    super ()\n    this.state={\n        firebase : false,\n    }\n  }\n  componentDidMount(){\n\n    database.child('PentaInformation').on('value', (snapshot) => {\n      const key = snapshot.val();\n      const billComplete = [];\n      for (let read in key) {\n          let item = key[read]\n          item.id = read\n          billComplete.push(item)\n      }\n        \n        this.setState({\n          firebase: billComplete.sort((arr1,arr2)=>{return (arr2.emision - arr1.emision)})\n        })\n    })\n   \n\n}\n\n  render (){\n    let bill = this.state.firebase ? this.state.firebase.map((element)=>{\n      let date1 = new Date()\n        date1.setTime(element.emision)\n      let day = date1.getDate()\n      let month = date1.getMonth()\n      let year= date1.getFullYear()\n      let hours = date1.getHours()\n      let minutes = date1.getMinutes()\n      let seconds = date1.getSeconds()\n\n      return (\n\n      <tr className=\"body\" key={element.id} >\n        <td key={element.folio} >NÂ°{element.folio}</td>\n        <td key={element.emisor.rut} ><p>{element.emisor.razonSocial}</p><p>{element.emisor.rut}</p></td>\n        <td key={element.receptor.rut}><p>{element.receptor.razonSocial}</p><p>{element.receptor.rut}</p></td>\n        <td key={element.emision}> <p>{ day+'/'+Number(month)+1 +'/'+ year }</p><p>{ hours +':'+ minutes+':'+ seconds}</p></td>\n        <td key={element.tipo}>{element.tipo}</td>        \n        <td key={element.id} >{element.detalle.map((item)=>{\n          return (\n            <div>\n                  <p className=\"details\">{item.servicio}</p>\n                  <p><span>-Monto:${item.monto}</span></p>  \n                  <p><span>-Iva: ${item.iva}</span></p>  \n                  \n            </div>\n            )\n        })}</td>\n      </tr>\n\n      )\n    }):null\n  return (\n    <div className=\"App\">\n      <header><img src={logo} alt='logo' className='logo'/></header>\n      <table>\n\t\t\t\t\t\t\t\t<thead className=\"head\">\n\t\t\t\t\t\t\t\t\t<tr>\n                    <th className=\"column6\">Folio</th>\n\t\t\t\t\t\t\t\t\t\t<th className=\"column2\">Emisor </th>\n\t\t\t\t\t\t\t\t\t\t<th className=\"column3\">Receptor</th>\n\t\t\t\t\t\t\t\t\t\t<th className=\"column4\">Fecha</th>\n\t\t\t\t\t\t\t\t\t\t<th className=\"column5\">Tipo</th>\n\t\t\t\t\t\t\t\t\t\t<th className=\"column7\">Contenido</th>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t{bill}\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t</tbody>\n\t\t\t</table>\n        <div className=\"footer\">\n          <p>Total de Documentos: {this.state.firebase.length}</p>\n        </div>\n      \n    </div>\n  );\n}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}